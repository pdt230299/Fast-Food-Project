{"version":3,"sources":["views/components/AuthenticateContext.js","views/components/CartContext.js","state/configureStore/index.js","state/configureStore/configureStore.prod.js","serviceWorker.js","utils/Loadable/index.js","routers/index.js","views/App.js","state/modules/example/types.js","state/modules/example/actions.js","state/modules/example/reducer.js","state/modules/example/index.js","state/rootSaga.js","index.js","state/rootReducer.js"],"names":["AuthenticateContext","React","createContext","AuthenticateContextProvider","children","useState","isAuthenticated","setIsAuthenticated","Provider","value","useStateAuthenticated","CartContext","CartContextProvider","cart","setCart","useEffect","cartFromLocal","JSON","parse","localStorage","getItem","length","setItem","stringify","useStateCart","module","exports","require","sagaMiddleware","createSagaMiddleware","configureStore","initialState","rootReducer","middlewares","enhancers","applyMiddleware","store","createStore","fromJS","compose","runSaga","run","close","dispatch","END","Boolean","window","location","hostname","match","Loading","className","Loadable","func","Component","lazy","props","fallback","routers","path","component","App","map","route","i","exact","key","sagas","fetchData","loadSuccess","createAction","types","loadFail","storeData","storePaginate","takeLatest","payload","exampleApi","fetch","call","response","data","meta","put","initState","loadStatus","examples","paginate","currentPage","perPage","total","reducer","handleActions","state","set","action","rootSaga","all","fork","exampleSagas","asyncReducers","combineReducers","example","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a301446.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const AuthenticateContext = React.createContext();\r\n// eslint-disable-next-line\r\nfunction AuthenticateContextProvider({ children }) {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    return (\r\n        <AuthenticateContext.Provider value={{ useStateAuthenticated: [isAuthenticated, setIsAuthenticated] }}>\r\n            {children}\r\n        </AuthenticateContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthenticateContextProvider;","import React, { useState, useEffect } from 'react';\r\n\r\nexport const CartContext = React.createContext();\r\n// eslint-disable-next-line\r\nfunction CartContextProvider({ children }) {\r\n    const [cart, setCart] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let cartFromLocal = JSON.parse(localStorage.getItem('cart'));\r\n        if (cartFromLocal == null) {\r\n            cartFromLocal = [];\r\n        }\r\n        if (cartFromLocal.length !== 0) {\r\n            setCart(cartFromLocal);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n    }, [cart]);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ useStateCart: [cart, setCart] }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n\r\nexport default CartContextProvider;","/* eslint-disable global-require */\nif (process.env.NODE_ENV === 'production') {\n    module.exports = require('./configureStore.prod');\n} else {\n    module.exports = require('./configureStore.dev');\n}\n/* eslint-enable */\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport { fromJS } from 'immutable';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState = {}, rootReducer) {\n    const middlewares = [\n        sagaMiddleware\n    ];\n\n    const enhancers = [\n        applyMiddleware(...middlewares)\n    ];\n\n    const store = createStore(\n        rootReducer(),\n        fromJS(initialState),\n        compose(...enhancers)\n    );\n\n    store.runSaga = sagaMiddleware.run;\n    store.close = () => store.dispatch(END);\n\n    return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React, { lazy, Suspense } from 'react';\n\nimport './style.scss';\n\nexport const Loading = (\n    <div className='loadable'>\n        <div className='scaling-squares-spinner'>\n            <div className='square' />\n            <div className='square' />\n            <div className='square' />\n            <div className='square' />\n        </div>\n    </div>\n);\n\nconst Loadable = (func) => {\n    const Component = lazy(func);\n\n    return (props) => (\n        <Suspense fallback={Loading}>\n            {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n            <Component {...props} />\n        </Suspense>\n    );\n};\n\nexport default Loadable;\n","import Loadable from '../utils/Loadable';\n\nconst HomePage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Home'));\nconst ResearchPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Research'));\nconst MenuPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Menu'));\nconst PromotionPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Promotion'));\nconst NewsPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/News'));\nconst ContactPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Contact'));\nconst CardDetailPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/CardDetail'));\nconst CartPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Cart'));\nconst LoginPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Login'));\nconst DashBroadPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/DashBroad'));\nconst ProductsPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Products'));\nconst OrdersPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/Orders'));\nconst AddProductPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/AddProduct'));\nconst EditProductPage = Loadable(() => import(/* webpackChunkName: \"js/home\" */ '@Views/pages/EditProduct'));\n\nconst routers = [\n    {\n        path: '/',\n        component: HomePage\n    },\n    {\n        path: '/research',\n        component: ResearchPage\n    },\n    {\n        path: '/menu',\n        component: MenuPage\n    },\n    {\n        path: '/promotion',\n        component: PromotionPage\n    },\n    {\n        path: '/news',\n        component: NewsPage\n    },\n    {\n        path: '/contact',\n        component: ContactPage\n    },\n    {\n        path: '/menu/:slug',\n        component: CardDetailPage\n    },\n    {\n        path: '/cart',\n        component: CartPage\n    },\n    {\n        path: '/login',\n        component: LoginPage\n    },\n    {\n        path: '/dashBroad',\n        component: DashBroadPage\n    },\n    {\n        path: '/products',\n        component: ProductsPage\n    },\n    {\n        path: '/orders',\n        component: OrdersPage\n    },\n    {\n        path: '/products/add',\n        component: AddProductPage\n    },\n    {\n        path: '/products/edit/:slug',\n        component: EditProductPage\n    }\n\n];\n\nexport default routers;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport routers from '../routers';\nimport CartContextProvider from './components/CartContext';\nimport AuthenticateContextProvider from './components/AuthenticateContext';\n\nconst App = () => (\n    <div className='App'>\n        <CartContextProvider>\n            <AuthenticateContextProvider>\n                <Router>\n                    <Switch>\n                        <Switch>\n                            {\n                                routers.map((route, i) => (\n                                    // eslint-disable-next-line react/jsx-props-no-spreading\n                                    <Route exact key={i} {...route} />\n                                ))\n                            }\n                        </Switch>\n                    </Switch>\n                </Router>\n            </AuthenticateContextProvider>\n        </CartContextProvider>\n    </div>\n);\n\nexport default App;\n","const LOAD_EXAMPLES = 'example/LOAD_EXAMPLES';\nconst LOAD_EXAMPLES_SUCCESS = 'example/LOAD_EXAMPLES_SUCCESS';\nconst LOAD_EXAMPLES_FAIL = 'example/LOAD_EXAMPLES_FAIL';\nconst STORE_EXAMPLES = 'example/STORE_EXAMPLES';\nconst STORE_PAGINATE = 'example/STORE_PAGINATE';\n\nexport default {\n    LOAD_EXAMPLES,\n    LOAD_EXAMPLES_SUCCESS,\n    LOAD_EXAMPLES_FAIL,\n    STORE_EXAMPLES,\n    STORE_PAGINATE\n};\n","import {\n    createAction\n} from 'redux-actions';\n\nimport { put, call, takeLatest } from 'redux-saga/effects';\nimport types from './types';\n// import handleError from '~/utils/ErrorHandler';\n\n//= ============== ACTIONS ===============//\nconst load = createAction(types.LOAD_EXAMPLES);\nconst loadSuccess = createAction(types.LOAD_EXAMPLES_SUCCESS);\nconst loadFail = createAction(types.LOAD_EXAMPLES_FAIL);\nconst storeData = createAction(types.STORE_EXAMPLES);\nconst storePaginate = createAction(types.STORE_PAGINATE);\n\nexport const actions = {\n    load\n};\n\n//= =============== SAGAS ===============//\nexport function* sagas() {\n    yield takeLatest(types.LOAD_EXAMPLES, fetchData);\n}\n\nfunction* fetchData({ payload }) {\n    try {\n        const exampleApi = {\n            fetch: 1\n        };\n        const { data: response } = yield call(exampleApi.fetch, payload);\n        const { data, meta } = response;\n        yield put(storeData(data));\n        yield put(storePaginate(meta));\n        yield put(loadSuccess());\n    } catch (error) {\n        // handleError(error);\n        yield put(loadFail());\n    }\n}\n","import { fromJS } from 'immutable';\nimport { handleActions } from 'redux-actions';\n\nimport types from './types';\n// import enums from '~/utils/enums';\n\n//= ============== SELECTOR ===============//\nconst loadStatus = (state) => state.getIn(['example', 'loadStatus']);\nconst examples = (state) => state.getIn(['example', 'examples']);\nconst paginate = (state) => state.getIn(['example', 'paginate']);\n\nexport const selectors = {\n    loadStatus,\n    examples,\n    paginate\n};\n\n//= ============== REDUCER ===============//\nconst initState = fromJS({\n    loadStatus: 'Loading',\n    examples: [],\n    paginate: {\n        currentPage: 1,\n        perPage: 1,\n        total: 1\n    }\n});\n\nconst loading = (state) => state.set('loadStatus', 'Loading');\nconst loadSuccess = (state) => state.set('loadStatus', 'Success');\nconst loadFail = (state) => state.set('loadStatus', 'Error');\nconst storeData = (state, action) => state.set('examples', fromJS(action.payload));\nconst storePaginate = (state, action) => state.set('paginate', fromJS(action.payload));\n\nconst reducer = handleActions({\n    [types.LOAD_EXAMPLES]: loading,\n    [types.LOAD_EXAMPLES_SUCCESS]: loadSuccess,\n    [types.LOAD_EXAMPLES_FAIL]: loadFail,\n    [types.STORE_EXAMPLES]: storeData,\n    [types.STORE_PAGINATE]: storePaginate\n}, initState);\n\nexport default reducer;\n","import types from './types';\nimport { sagas, actions } from './actions';\nimport reducer, { selectors } from './reducer';\n\nexport default reducer;\n\nexport {\n    types as exampleTypes,\n    sagas as exampleSagas,\n    actions as exampleActions,\n    selectors as exampleSelectors\n};\n","import {\n    all,\n    fork\n} from 'redux-saga/effects';\nimport { exampleSagas } from './modules/example';\n\nexport default function* rootSaga() {\n    yield all([\n        fork(exampleSagas)\n    ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './views/App';\nimport configureStore from './state/configureStore';\nimport rootReducer from './state/rootReducer';\nimport rootSaga from './state/rootSaga';\nimport './assets/libs/tailwind.css';\n\nconst store = configureStore({}, rootReducer);\n\nstore.runSaga(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux-immutable';\n\nimport example from './modules/example';\n\n/**\n * Creates the root reducer with the asynchronously loaded ones\n */\nexport default function rootReducer(asyncReducers) {\n    return combineReducers({\n        example,\n        ...asyncReducers\n    });\n}\n"],"sourceRoot":""}